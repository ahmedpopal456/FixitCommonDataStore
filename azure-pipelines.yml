trigger:
  branches:
    include:
      - staging
      - master

variables:
  # Version Handling Variables
  majorProductVersion: 1   
  minorProductVersion: 0

jobs:
# master branch versioning
- job: Build_Master_Version_Number
  displayName: 'Bump package version - master branch'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
  variables:
    masterMajorMinor: $(majorProductVersion).$(minorProductVersion)
    masterPatchCount: $[counter(variables['masterMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).$(masterPatchCount)"
      name: IfMasterSetBuildNameAndPatch

# staging branch versioning
- job: Build_Staging_Version_Number
  displayName: 'Bump package version - staging branch'
  condition: eq(variables['Build.SourceBranch'], 'refs/heads/staging')
  variables:
    stagingMajorMinor: $(majorProductVersion).$(minorProductVersion)-beta
    stagingPatchCount: $[counter(variables['stagingMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).$(stagingPatchCount)-beta"
      name: IfStagingSetBuildNameAndPatch

# PR versioning for master branch & staging branch
- job: Build_PullRequest_Version_Number
  displayName: 'Bump package version - PR for master & staging branch'
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), eq(variables['Build.Reason'], 'PullRequest'))
  variables:
    pullRequestMajorMinor: $(majorProductVersion).$(minorProductVersion)-alpha$(variables['system.pullrequest.pullrequestid'])
    pullRequestPatchCount: $[counter(variables['pullRequestMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).0-alpha$(system.pullrequest.pullrequestid)-$(pullRequestPatchCount)"
      name: IfPullRequestBuildNameAndPatch

# Name branch prefix to build version (master branch & staging branch)
- job: Build_Branch_Version_Number
  displayName: 'Bump package version - other branch'
  condition: and(ne(variables['Build.SourceBranch'], 'refs/heads/master'), ne(variables['Build.SourceBranch'], 'refs/heads/staging'), ne(variables['Build.Reason'], 'PullRequest'))
  variables:
    branchMajorMinor: $(majorProductVersion).$(minorProductVersion)-br$(variables['build.sourcebranch'])
    branchPatchCount: $[counter(variables['branchMajorMinor'], 0)]
  steps:
    - bash: |
        echo "##vso[build.updatebuildnumber]$(majorProductVersion).$(minorProductVersion).0-$(Build.BuildId)-$(branchPatchCount)"
      name: IfBranchBuildNameAndPatch


- job: PublishCommonDataStoreLibrary
  displayName: 'Publish common data store library'
  dependsOn:
    - Build_Branch_Version_Number
    - Build_PullRequest_Version_Number
    - Build_Staging_Version_Number
    - Build_Master_Version_Number
  condition: or(succeeded('Build_Branch_Version_Number'), succeeded('Build_PullRequest_Version_Number'), succeeded('Build_Staging_Version_Number'), succeeded('Build_Master_Version_Number'))
  
  variables:
    # This library is published to the FixitFeed https://dev.azure.com/FixIt-App/FixIt-Capstone/_packaging?_a=feed&feed=FixitFeed
    projectName: FixIt-Capstone
    feedName: FixitFeed

  pool:
    vmImage: 'windows-2019'
    displayName: 'Run Test Pipeline and publish package'

  steps:

  # Run npm install
  - task: Npm@1
    displayName: 'Run npm install'
    inputs:
      command: 'install'

  # Prepare Analysis Configuration for Sonar Cloud 
  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'fixit-sonarcloud'
      organization: 'fixit'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'fixit-app_FixitCommonDataStore'
      cliProjectName: 'FixitCommonDataStore'
      cliSources: '$(Build.SourcesDirectory)'

  # Run Unit Tests
  - task: Npm@1
    displayName: 'Run Unit Tests'
    inputs:
      command: 'custom'
      customCommand: 'run test'

  # Publish Test Results
  - task: PublishTestResults@2
    displayName: 'Publish Test Results'
    inputs:
      testResultsFormat: 'JUnit'
      testResultsFiles: 'junit.xml'
      failTaskOnFailedTests: true

  # Npm Versioning
  - task: Npm@1
    displayName: 'Npm - Bump package version'
    inputs:
      command: 'custom'
      workingDir: $(Build.SourcesDirectory)
      verbose: false
      customCommand: 'version $(Build.BuildNumber) --no-git-tag-version --allow-same-version'
      customRegistry: 'useFeed'
      customFeed: '$(projectName)/$(feedName)'

  # Compile
  - task: Npm@1
    displayName: 'Compile ts library'
    inputs:
      command: 'custom'
      customCommand: 'run tsc'

  # Publishes npm package
  - task: Npm@1
    displayName: 'Publish Artifact'
    inputs:
      command: 'publish'
      publishRegistry: 'useFeed'
      publishFeed: '$(projectName)/$(feedName)'

  # Run Sonar Cloud Code Analysis
  - task: SonarCloudAnalyze@1
  
  # Publish Sonar Cloud Quality Gate Result
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'